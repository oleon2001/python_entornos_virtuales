# Importamos el m칩dulo 'store' que contiene funciones para interactuar con una tienda
import store

# Importamos el framework 'FastAPI' para construir APIs
from fastapi import FastAPI

# Importamos la clase 'HTMLResponse' para devolver respuestas HTML
from fastapi.responses import HTMLResponse

# Creamos una instancia de la aplicaci칩n FastAPI
adrianTeOdio = FastAPI()

# Definimos un endpoint GET en la ra칤z del sitio web ('/') que devuelve una lista de enteros
#Se utiliza para crear una instancia la cual cuando sea mandada a llamar mediante la ruta establecida por una peticion HTTP a una URL ejecutara un funci칩n que devolvera un valor dado
'''
La funci칩n decoradora @app.get('/') es un ejemplo de un decorador
de ruta en FastAPI. Un decorador de ruta es una forma de definir 
una funci칩n que se encargar치 de manejar una solicitud HTTP espec칤fica.
'''

@adrianTeOdio.get('/') # cada que se obtenga la ruta '/' se ejecutara la siguiente funcion
def get_list():
    # Devolvemos una lista de enteros
    return [1, 2, 3]

# Definimos un endpoint GET en la ruta '/contact' que devuelve una respuesta HTML
@adrianTeOdio.get('/contact', response_class=HTMLResponse)
def get_list():
    # Devolvemos una cadena HTML que contiene un t칤tulo y un p치rrafo
    return """
        <h1>HOLA ADRIAN :)</h1>
        <p>TE ODIO CON TODAS LAS FUERZAS QUE UN HOMBRE PUEDE ODIAR- PEGATE</p>
    """

# Definimos una funci칩n 'run' que se ejecutar치 cuando se ejecute el script
def run():
    # Llamamos a la funci칩n 'get_categories' del m칩dulo 'store'
    # Esta funci칩n probablemente devuelve una lista de categor칤as de la tienda
    store.get_categories()

# Verificamos si el script se est치 ejecutando directamente (no se est치 importando como m칩dulo)
if __name__ == '__main__':
    # Ejecutamos la funci칩n 'run'
    run()

'''
游뱄 _Rutina de la clase_游녢

__

    Navegar a proyecto Web

cd ../web-server

    Activar ambiente del proyecto

source env/bin/activate 

    Agregar nuevas librer칤as FastAPI

pip3 install fastapi

    Agregar ASGI (Asynchronous Server Gateway Interface) Uvicorn

pip3 install "uvicorn[standard]"

    Verificar librer칤as instaladas

pip3 freeze

    Actualizar Requirements

 pip3 freeze > requirements.txt

 correr el servidor de uvicorn

 uvicorn main:adrianTeOdio --reload

 main es el archivo donde se esta ejecutando
 adrianTeOdio es el objeto que contiene al fastApi para hacer las peticiones
 --reload es para que se reinicie el servidor cada vez que se hace un cambio en el c칩digo
 

'''


'''
a침adidos adicionales



    FastAPI

    Es un framework de Python para crear aplicaciones web
      r치pidas y seguras. Utilice la mejor OpenAPI para definir la 
      interfaz de la aplicaci칩n y proporcione un conjunto de herramientas
        para validar y documentar la API de manera autom치tica.

    ****Uvicorn ****

    Es un servidor ASGI (Asynchronous Server Gateway Interface) de alto rendimiento 
    para ejecutar aplicaciones ASGI como FastAPI. Es una alternativa a otros servidores ASGI 
    como Daphne y Hypercorn.

    FastAPI y Uvicorn se utilizan 
    juntos para proporcionar un entorno r치pido y f치cil de usar 
    para el desarrollo y el uso de aplicaciones web basadas en ASGI.

'''


'''
un endpoint es una URL espec칤fica que una aplicaci칩n utiliza para interactuar con el 
cliente (usualmente un navegador web o una aplicaci칩n m칩vil) para realizar una acci칩n espec칤fica o recuperar datos espec칤ficos.

Piensa en un endpoint como una puerta de entrada a un recurso o funcionalidad espec칤fica dentro de una a
plicaci칩n. Cuando un cliente (como un navegador web) env칤a una solicitud a un endpoint, la aplicaci칩n procesa
la solicitud y devuelve una respuesta, que puede ser en forma de datos, HTML, JSON o incluso un mensaje de error.

En el c칩digo proporcionado, tenemos dos endpoints:

@adrianTeOdio.get('/') - Este endpoint se define en la URL ra칤z (/) y devuelve una lista de enteros [1, 2, 3].
@adrianTeOdio.get('/contact', response_class=HTMLResponse) - Este endpoint se define en 
la URL /contact y devuelve una respuesta HTML con un t칤tulo y un p치rrafo.
Los endpoints se pueden definir utilizando diferentes m칠todos HTTP, como:

GET: Recupera datos del servidor.
POST: Env칤a datos al servidor para crear un nuevo recurso.
PUT: Actualiza un recurso existente en el servidor.
DELETE: Elimina un recurso en el servidor.
En FastAPI, los endpoints se definen utilizando decoradores, 
como @app.get('/') o @app.post('/create'), que especifican el m칠todo HTTP y la ruta URL para el endpoint.

'''
